/*
Floyd 最短路径算法

多源最短路径：任意两点之间最短路径

都为单向边

Floyd-Warshall算法不能解决带有“负权回路”（或者叫“负权环”）的图，因为带有“负权回路”的图没有最短路

如现在只允许经过1号顶点，求任意两点之间的最短路程，应该如何求呢？
只需判断e[i][1]+e[1][j]是否比e[i][j]要小即可。e[i][j]表示的是从i号顶点到j号顶点之间的路程。
e[i][1]+e[1][j]表示的是从i号顶点先到1号顶点，再从1号顶点到j号顶点的路程之和。其中i是1~n循环，j也是1~n循环，
代码实现如下
*/

#include <stdio.h>
int main()
{
	int e[10][10], k, i, j, n, m, t1, t2, t3;
	int inf = 99999999;//用inf(infinity)存储一个我们认为的正无穷值
	//读入n和m，n表示顶点个数，m表示边的条数

	scanf_s("%d %d",&n,&m);

	//初始化
	for (i = 1; i <= n; i++)
		for (j = 1; j <= n; j++)
			if (i == j)e[i][j] = 0;
			else e[i][j] = inf;

	//读入边
			for (i = 1; i <= m; i++)
			{
				scanf_s("%d %d %d",&t1,&t2,&t3);
				e[t1][t2]=t3;
			}

	//Floyd-Warshall算法核心语句
			for (k = 1; k <= n; k++)
				for (i = 1; i <= n; i++)
					for (j = 1; j <= n; j++)
						if (e[i][j] > e[i][k] + e[k][j])
							e[i][j] = e[i][k] + e[k][j];
	//输出最终的结果
			for (i = 1; i <= n; i++)
			{
				for (j = 1; j <= n; j++)
				{
					printf("%10d",e[i][j]);
				}
				printf("\n");
			}

			return 0;
}

/*
这段代码的基本思想就是：最开始之允许进过1号顶点进行中转，接下来只允许经过1和2号
顶点进行中转。。。允许经过1~n号所有顶点进行中转，求任意两点之间的最短路程。

用一句话概括就是：从i号顶点到j号顶点只经过k号顶点的最短路程。

其实这是一种动态规划的思想

*/